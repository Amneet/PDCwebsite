{"version":3,"sources":["view/CreateProject/CreateProject.js","view/Header/Header.js","view/ProjectList/ProjectListUser.js","view/ProjectList/ProjectListItem.js","view/ProjectList/ProjectList.js","view/ProjectList/ProjectListInterface.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["CreateProject","props","cancelCreateOpen","createProject","useState","title","date","description","skills","hostedBy","info","setInfo","handleFormChange","target","name","value","Segment","Form","onSubmit","event","preventDefault","autoComplete","Field","onChange","placeholder","type","Button","positive","onClick","Header","button","history","useReactRouter","user","error","authenticated","userInfo","setUserInfo","handleHome","push","useEffect","axios","get","withCredentials","then","res","console","log","data","catch","e","window","open","as","inverted","Menu","fixed","Container","Item","header","alert","position","ProjectListUser","List","Image","size","circular","src","photoURL","ProjectListItem","project","hostPhotoURL","Group","Content","Description","Icon","secondary","horizontal","map","key","id","clearing","color","floated","content","ProjectList","projectsInfo","projectsFromServer","ProjectListInterface","setProjectsInfo","isOpen","setIsOpen","handleIsOpenToggle","Grid","Column","width","newProject","Routers","className","exact","path","component","App","Router","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.88d34522.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Button, Form, Segment } from \"semantic-ui-react\";\n\n// Create a new project and show on Project List page.\nconst CreateProject = (props) => {\n  const { cancelCreateOpen, createProject } = props;\n\n  const [info, setInfo] = useState({\n    title: \"\",\n    date: \"\",\n    description: \"\",\n    skills: \"\",\n    hostedBy: \"\",\n  });\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    createProject(info);\n  };\n\n  const handleFormChange = ({ target: { name, value } }) => {\n    setInfo({\n      ...info,\n      [name]: value,\n    });\n  };\n\n  return (\n    <Segment>\n      <Form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <Form.Field>\n          <label>Project Title</label>\n          <input\n            name=\"title\"\n            value={info.title}\n            onChange={handleFormChange}\n            placeholder=\"Project Title\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Date</label>\n          <input\n            name=\"date\"\n            value={info.date}\n            onChange={handleFormChange}\n            type=\"date\"\n            placeholder=\"Date\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Skills</label>\n          <input\n            name=\"skills\"\n            value={info.skills}\n            onChange={handleFormChange}\n            placeholder=\"Required Skills\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Desciption</label>\n          <input\n            name=\"description\"\n            value={info.description}\n            onChange={handleFormChange}\n            placeholder=\"Enter the Desciption of the project\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Hosted By</label>\n          <input\n            name=\"hostedBy\"\n            value={info.hostedBy}\n            onChange={handleFormChange}\n            placeholder=\"Enter the name of company hosting\"\n          />\n        </Form.Field>\n        <Button positive type=\"submit\">\n          Submit\n        </Button>\n        <Button onClick={cancelCreateOpen} type=\"button\">\n          Cancel\n        </Button>\n      </Form>\n    </Segment>\n  );\n};\nexport default CreateProject;\n","import { Button, Container, Menu } from \"semantic-ui-react\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport useReactRouter from \"use-react-router\";\nimport axios from \"axios\";\n\nconst Header = (props) => {\n  const { history } = useReactRouter();\n\n  const [userInfo, setUserInfo] = useState({\n    user: {},\n    error: null,\n    authenticated: false,\n  });\n\n  const handleLogin = () => {\n    window.open(\"auth/login\", \"_self\");\n  };\n\n  const handleLogout = () => {\n    window.open(\"/auth/logout\", \"_self\");\n  };\n\n  const handleHome = () => {\n    history.push(\"/\");\n  };\n\n  const handleProjectList = () => {\n    if (userInfo.authenticated) {\n      history.push(\"/project-list\");\n    } else {\n      alert(\"You need to login!\");\n    }\n  };\n\n  useEffect(() => {\n    axios\n      .get(\"/auth/login/success\", {\n        withCredentials: true,\n      })\n      .then((res) => {\n        console.log(res);\n        return res.data;\n      })\n      .then((data) => {\n        setUserInfo({\n          ...userInfo,\n          user: data.user,\n          authenticated: data.authenticated,\n        });\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  //if user doesn't login, display Login button, or display Sign out\n  let button;\n  if (userInfo.authenticated) {\n    button = (\n      <Button onClick={handleLogout} as=\"a\" inverted>\n        Sign out\n      </Button>\n    );\n  } else {\n    button = (\n      <Button onClick={handleLogin} as=\"a\" inverted>\n        Login\n      </Button>\n    );\n  }\n\n  return (\n    <Fragment>\n      <Menu fixed=\"top\" inverted>\n        <Container>\n          <Menu.Item as=\"a\" onClick={handleHome} header>\n            Professional Development Club\n          </Menu.Item>\n          <Menu.Item as=\"a\" onClick={handleHome}>\n            Home\n          </Menu.Item>\n          <Menu.Item as=\"a\" onClick={handleProjectList}>\n            Project List\n          </Menu.Item>\n          <Menu.Item position=\"right\">{button}</Menu.Item>\n          <Menu.Item>\n            {userInfo.authenticated ? \"Welcome \" + userInfo.user.name : \"\"}\n          </Menu.Item>\n        </Container>\n      </Menu>\n    </Fragment>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { List, Image } from \"semantic-ui-react\";\n\nconst ProjectListUser = (props) => {\n  const { user } = props;\n\n  return (\n    <List.Item>\n      <Image as=\"a\" size=\"mini\" circular src={user.photoURL} />\n    </List.Item>\n  );\n};\n\nexport default ProjectListUser;\n","import React, { Fragment } from \"react\";\nimport { Segment, Item, Icon, List, Button } from \"semantic-ui-react\";\nimport ProjectListUser from \"./ProjectListUser\";\n\nconst ProjectListItem = (props) => {\n  const {\n    hostPhotoURL,\n    title,\n    date,\n    description,\n    hostedBy,\n    user,\n  } = props.project;\n\n  return (\n    <Fragment>\n      <Segment.Group>\n        <Segment>\n          <Item.Group>\n            <Item>\n              <Item.Image size=\"tiny\" circular src={hostPhotoURL} />\n              <Item.Content>\n                <Item.Header as=\"a\">{title}</Item.Header>\n                <Item.Description>\n                  Hosted by <a>{hostedBy}</a>\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n        <Segment>\n          <span>\n            <Icon name=\"clock\" /> {date}\n          </span>\n        </Segment>\n        <Segment secondary>\n          <List horizontal>\n            {user &&\n              user.map((user) => <ProjectListUser key={user.id} user={user} />)}\n          </List>\n        </Segment>\n        <Segment clearing>\n          <span>{description}</span>\n          <Button as=\"a\" color=\"teal\" floated=\"right\" content=\"View\" />\n        </Segment>\n      </Segment.Group>\n    </Fragment>\n  );\n};\n\nexport default ProjectListItem;\n","import React, { Fragment } from \"react\";\nimport ProjectListItem from \"./ProjectListItem\";\n\nconst ProjectList = (props) => {\n  const { projectsInfo } = props;\n  return (\n    <Fragment>\n      {projectsInfo.map((project) => (\n        <ProjectListItem key={project.id} project={project} />\n      ))}\n    </Fragment>\n  );\n};\n\nexport default ProjectList;\n","import React, { Fragment, useState } from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport CreateProject from \"../CreateProject/CreateProject\";\nimport ProjectList from \"./ProjectList\";\n\n// data from server\nconst projectsFromServer = [\n  {\n    id: \"1\",\n    title: \"Web Development\",\n    date: \"2020-03-27\",\n    description:\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\n    hostedBy: \"Apple\",\n    hostPhotoURL:\n      \"https://imageog.flaticon.com/icons/png/512/37/37150.png?size=1200x630f&pad=10,10,10,10&ext=png&bg=FFFFFFFF\",\n    user: [\n      {\n        id: \"a\",\n        name: \"Bob\",\n        photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\",\n      },\n    ],\n  },\n  {\n    id: \"2\",\n    title: \"Game Development\",\n    date: \"2020-05-28\",\n    description:\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\n    hostedBy: \"Ubisoft\",\n    hostPhotoURL:\n      \"https://www.logo-designer.co/wp-content/uploads/2017/06/2017-new-ubisoft-logo-2.png\",\n    user: [\n      {\n        id: \"a\",\n        name: \"Tom\",\n        photoURL: \"https://randomuser.me/api/portraits/men/30.jpg\",\n      },\n      {\n        id: \"b\",\n        name: \"Bob\",\n        photoURL: \"https://randomuser.me/api/portraits/men/29.jpg\",\n      },\n    ],\n  },\n];\n\nconst ProjectListInterface = () => {\n  const [projectsInfo, setProjectsInfo] = useState(projectsFromServer);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleIsOpenToggle = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const handleCreateProject = (newProject) => {\n    // we will get these info from server\n    newProject.id = 9;\n    newProject.hostPhotoURL =\n      \"https://img.icons8.com/carbon-copy/2x/company.png\";\n    setProjectsInfo([...projectsInfo, newProject]);\n    setIsOpen(false);\n  };\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column width={10}>\n          <ProjectList projectsInfo={projectsInfo} />\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <Button\n            onClick={handleIsOpenToggle}\n            positive\n            content=\"Create New Project\"\n          />\n          {isOpen && (\n            <CreateProject\n              createProject={handleCreateProject}\n              cancelCreateOpen={handleIsOpenToggle}\n            />\n          )}\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default ProjectListInterface;\n","import React, { Fragment } from \"react\";\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport CreateProject from \"./view/CreateProject/CreateProject\";\nimport Home from \"./view/Home/Home\";\nimport Header from \"./view/Header/Header\";\nimport ProjectListInterface from \"./view/ProjectList/ProjectListInterface\";\nimport { Container } from \"semantic-ui-react\";\n\n/**\n * This is routers for the website.\n * \n * Need to solve login authentication, user can input url directly to go to the page.\n */\n\nconst Routers = () => {\n  return (\n    <Fragment>\n      <Router>\n        <Header />\n        <Switch>\n          {/*<Route exact path='/' component={Home}/>*/}\n          <Container className=\"main\">\n            <Route exact path=\"/create-project\" component={CreateProject} />\n            <Route\n              exact\n              path=\"/project-list\"\n              component={ProjectListInterface}\n            />\n          </Container>\n        </Switch>\n      </Router>\n    </Fragment>\n  );\n};\n\nexport default Routers;\n","import React, { Fragment } from \"react\";\nimport Routers from \"./Router\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst App = () => {\n  return (\n    <Fragment>\n        <Routers />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}